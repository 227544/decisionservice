<b2x:translation xmlns:b2x="http://schemas.ilog.com/JRules/1.3/Translation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://schemas.ilog.com/JRules/1.3/Translation ilog/rules/schemas/1_3/b2x.xsd">
    <id>180f195c-f860-47ad-b5d7-fd0715f10163</id>
    <lang>ARL</lang>
    <class>
        <businessName>com.bnpparibas.cardif.rule.utils.DateUtils</businessName>
        <executionName>void</executionName>
        <method>
            <name>addDays</name>
            <parameter type="java.util.Date"/>
            <parameter type="int"/>
            <body language="arl"><![CDATA[
            if (currentDate == null) {
  return currentDate;
}

org.joda.time.DateTime dateTime = new org.joda.time.DateTime(currentDate);
return dateTime.plusDays(numberOfDays).toDate();
            ]]></body>
        </method>
        <method>
            <name>addDaysToDate</name>
            <parameter type="java.util.Date"/>
            <parameter type="int"/>
            <body language="arl"><![CDATA[
            if (currentDate == null) {
  return null;
}

return new org.joda.time.LocalDate(currentDate).plusDays(quantityOfDays).toDate();
            ]]></body>
        </method>
        <method>
            <name>addMonths</name>
            <parameter type="java.util.Date"/>
            <parameter type="int"/>
            <body language="arl"><![CDATA[
            if (currentDate == null) {
  return currentDate;
}

org.joda.time.DateTime newDate = new org.joda.time.DateTime(currentDate.getTime()).plusMonths(numberOfMonths);
return newDate.toDate();
            ]]></body>
        </method>
        <method>
            <name>addMonthsToDateRange</name>
            <parameter type="java.util.Date"/>
            <parameter type="java.util.Date"/>
            <parameter type="int"/>
            <body language="arl"><![CDATA[
            if (initialDate == null) {
  throw new java.lang.IllegalArgumentException();
}

org.joda.time.DateTime start = new org.joda.time.DateTime(initialDate.getTime());
org.joda.time.DateTime last = new org.joda.time.DateTime(finalDate.getTime());
org.joda.time.Period period = new org.joda.time.Period(start.dayOfMonth().withMinimumValue().withTimeAtStartOfDay(), last.dayOfMonth().withMinimumValue().withTimeAtStartOfDay(), org.joda.time.PeriodType.months().withDaysRemoved());
org.joda.time.DateTime newDate = new org.joda.time.DateTime(initialDate.getTime()).plusMonths(numberOfMonths + period.getMonths());
return newDate.toDate();
            ]]></body>
        </method>
        <method>
            <name>addYears</name>
            <parameter type="java.util.Date"/>
            <parameter type="int"/>
            <body language="arl"><![CDATA[
            if (currentDate == null) {
  return currentDate;
}

org.joda.time.DateTime dateTime = new org.joda.time.DateTime(currentDate);
return dateTime.plusYears(numberOfYears).toDate();
            ]]></body>
        </method>
        <method>
            <name>countDays</name>
            <parameter type="java.util.Date"/>
            <parameter type="java.util.Date"/>
            <body language="arl"><![CDATA[
            org.joda.time.LocalDate start = new org.joda.time.LocalDate(initialDate);
org.joda.time.LocalDate end = new org.joda.time.LocalDate(finalDate);
return org.joda.time.Days.daysBetween(start, end).getDays();
            ]]></body>
        </method>
        <method>
            <name>countMonths</name>
            <parameter type="java.util.Date"/>
            <parameter type="java.util.Date"/>
            <body language="arl"><![CDATA[
            org.joda.time.LocalDate start = new org.joda.time.LocalDate(initialDate);
org.joda.time.LocalDate end = new org.joda.time.LocalDate(finalDate).plusDays(1);
return org.joda.time.Months.monthsBetween(start, end).getMonths();
            ]]></body>
        </method>
        <method>
            <name>countYears</name>
            <parameter type="java.util.Date"/>
            <parameter type="java.util.Date"/>
            <body language="arl"><![CDATA[
            org.joda.time.LocalDate start = new org.joda.time.LocalDate(initialDate);
org.joda.time.LocalDate end = new org.joda.time.LocalDate(finalDate);
return org.joda.time.Years.yearsBetween(start, end).getYears();
            ]]></body>
        </method>
        <method>
            <name>dateInThePast</name>
            <parameter type="java.util.Date"/>
            <parameter type="int"/>
            <parameter type="int"/>
            <body language="arl"><![CDATA[
            org.joda.time.LocalDate dtRef = new org.joda.time.LocalDate(dateReference);
return dtRef.minusYears(years + 1).plusDays(365 - days).toDateTimeAtCurrentTime().toDate();
            ]]></body>
        </method>
        <method>
            <name>extractDay</name>
            <parameter type="java.util.Date"/>
            <body language="arl"><![CDATA[
            if (currentDate == null) {
  return 0;
}

org.joda.time.LocalDate date = new org.joda.time.LocalDate(currentDate);
return date.getDayOfMonth();
            ]]></body>
        </method>
        <method>
            <name>extractMonth</name>
            <parameter type="java.util.Date"/>
            <body language="arl"><![CDATA[
            if (currentDate == null) {
  return 0;
}

org.joda.time.LocalDate date = new org.joda.time.LocalDate(currentDate);
return date.getMonthOfYear();
            ]]></body>
        </method>
        <method>
            <name>extractYear</name>
            <parameter type="java.util.Date"/>
            <body language="arl"><![CDATA[
            if (currentDate == null) {
  return 0;
}

org.joda.time.LocalDate date = new org.joda.time.LocalDate(currentDate);
return date.getYear();
            ]]></body>
        </method>
        <method>
            <name>firstDayOfNextMonth</name>
            <parameter type="java.util.Date"/>
            <body language="arl"><![CDATA[
            java.util.Calendar calendar = java.util.Calendar.getInstance();
calendar.setTime(date);
calendar.set(java.util.Calendar.DAY_OF_MONTH, 1);
calendar.add(java.util.Calendar.MONTH, 1);
return new org.joda.time.LocalDate(calendar.getTime()).toDate();
            ]]></body>
        </method>
        <method>
            <name>formatDate</name>
            <parameter type="java.util.Date"/>
            <parameter type="java.lang.String"/>
            <body language="arl"><![CDATA[
            if (value == null) {
  return null;
}

return new java.text.SimpleDateFormat(format).format(value);
            ]]></body>
        </method>
        <method>
            <name>getDayOfMonth</name>
            <parameter type="java.util.Date"/>
            <body language="arl"><![CDATA[
            if (referenceDate != null) {
  return java.lang.Integer.valueOf(new org.joda.time.LocalDate(referenceDate).getDayOfMonth());
}

return null;
            ]]></body>
        </method>
        <method>
            <name>getFirstDayOfMonthOf</name>
            <parameter type="java.util.Date"/>
            <body language="arl"><![CDATA[
            if (referenceDate != null) {
  org.joda.time.LocalDate firstDayOfMonth = new org.joda.time.LocalDate(referenceDate).withDayOfMonth(1);
  return firstDayOfMonth.toDate();
}
 else {
  return null;
}
            ]]></body>
        </method>
        <method>
            <name>getSystemDate</name>
            <body language="arl"><![CDATA[
            return new java.util.Date(java.lang.System.currentTimeMillis());
            ]]></body>
        </method>
        <method>
            <name>getUndefinedDate</name>
            <body language="arl"><![CDATA[
            return null;
            ]]></body>
        </method>
        <method>
            <name>lastDayOfMonth</name>
            <parameter type="java.util.Date"/>
            <body language="arl"><![CDATA[
            java.util.Calendar calendar = java.util.Calendar.getInstance();
calendar.setTime(date);
int lastDayOfMonth = calendar.getActualMaximum(java.util.Calendar.DAY_OF_MONTH);
calendar.set(java.util.Calendar.DAY_OF_MONTH, lastDayOfMonth);
return new org.joda.time.LocalDate(calendar.getTime()).toDate();
            ]]></body>
        </method>
        <method>
            <name>lastDayOfMonth</name>
            <parameter type="java.util.Date"/>
            <parameter type="int"/>
            <body language="arl"><![CDATA[
            java.util.Calendar calendar = java.util.Calendar.getInstance();
int actualMonth = calendar.get(java.util.Calendar.MONTH);
int nextMonth = actualMonth + numberOfMonth;
calendar.set(java.util.Calendar.MONTH, nextMonth);
calendar.set(java.util.Calendar.DAY_OF_MONTH, 1);
int lastDayOfMonth = calendar.getActualMaximum(java.util.Calendar.DAY_OF_MONTH);
calendar.set(java.util.Calendar.DAY_OF_MONTH, lastDayOfMonth);
return new org.joda.time.LocalDate(calendar.getTime()).toDate();
            ]]></body>
        </method>
        <method>
            <name>newDate</name>
            <parameter type="int"/>
            <parameter type="int"/>
            <parameter type="int"/>
            <body language="arl"><![CDATA[
            org.joda.time.Chronology chronology = new org.joda.time.DateTime(new java.util.Date()).getChronology();
return new org.joda.time.LocalDate(year, month + 1, day, chronology).toDate();
            ]]></body>
        </method>
    </class>
    <class>
        <businessName>com.bnpparibas.cardif.rule.utils.EnumerationUtils</businessName>
        <executionName>void</executionName>
        <method>
            <name>convertEnumToString</name>
            <parameter type="java.lang.Enum"/>
            <body language="arl"><![CDATA[
            return enum1.name();
            ]]></body>
        </method>
    </class>
    <class>
        <businessName>com.bnpparibas.cardif.rule.utils.NameUtils</businessName>
        <executionName>void</executionName>
        <method>
            <name>normalize</name>
            <parameter type="java.lang.String"/>
            <body language="arl"><![CDATA[
            return ilog.rules.util.IlrIdConverter.getEngineIdentifier(name);
            ]]></body>
        </method>
    </class>
    <class>
        <businessName>com.bnpparibas.cardif.rule.utils.NumberUtils</businessName>
        <executionName>void</executionName>
        <method>
            <name>format</name>
            <parameter type="java.lang.Number"/>
            <parameter type="java.lang.String"/>
            <body language="arl"><![CDATA[
            if (number == null) {
  return null;
}

return new java.text.DecimalFormat(mask).format(number);
            ]]></body>
        </method>
        <method>
            <name>roundUp</name>
            <parameter type="java.math.BigDecimal"/>
            <parameter type="java.lang.Integer"/>
            <body language="arl"><![CDATA[
            java.math.BigDecimal roundValue = value.setScale(scale.intValue(), java.math.BigDecimal.ROUND_HALF_UP);
return roundValue.setScale(value.scale());
            ]]></body>
        </method>
    </class>
    <class>
        <businessName>com.bnpparibas.cardif.rule.utils.PreprocessingRuleUtils</businessName>
        <executionName>void</executionName>
        <method>
            <name>isDefined</name>
            <parameter type="java.lang.Object"/>
            <body language="arl"><![CDATA[
            return value != null;
            ]]></body>
        </method>
        <method>
            <name>isPositiveAmountValueDefined</name>
            <parameter type="java.math.BigDecimal"/>
            <body language="arl"><![CDATA[
            return value != null && value.signum() >= 0;
            ]]></body>
        </method>
        <method>
            <name>newAmountValue</name>
            <body language="arl"><![CDATA[
            return java.math.BigDecimal.ZERO;
            ]]></body>
        </method>
        <method>
            <name>newIntegerValue</name>
            <body language="arl"><![CDATA[
            return java.lang.Integer.valueOf(0);
            ]]></body>
        </method>
        <method>
            <name>newStringValue</name>
            <body language="arl"><![CDATA[
            return new java.lang.String();
            ]]></body>
        </method>
    </class>
    <class>
        <businessName>com.bnpparibas.cardif.rule.utils.RuleUtils</businessName>
        <executionName>void</executionName>
        <method>
            <name>booleanToString</name>
            <parameter type="boolean"/>
            <body language="arl"><![CDATA[
            return java.lang.String.valueOf(value);
            ]]></body>
        </method>
        <method>
            <name>dateToString</name>
            <parameter type="java.util.Date"/>
            <body language="arl"><![CDATA[
            if (value == null) {
  return "";
}

return value.toString();
            ]]></body>
        </method>
        <method>
            <name>getRulePropertyValues</name>
            <parameter type="com.ibm.rules.engine.ruledef.runtime.Rule"/>
            <parameter type="com.bnpparibas.cardif.pims.domain.ODMExtensionModelAttribute"/>
            <body language="arl"><![CDATA[
            // The following IRL code cannot be automatically migrated.
// This code can't be compiled as is with decision engine.
HashSet result = new HashSet();	
if (ruleInstance != null && aspect != null) {
	IlrPropertyList ruleProperties = ruleInstance.getProperties(); 
	if (ruleProperties.containsKey(aspect.getDescription())) {
		String currentTokens = ruleInstance.getPropertyValue(aspect.getDescription()).toString();
		if (currentTokens != null) {
			Iterable<String> currentTokensIterable = Splitter.on(",").split(currentTokens);
			Iterator<String> currentTokensIterator = currentTokensIterable.iterator();
			while (currentTokensIterator.hasNext()) {
				result.add(currentTokensIterator.next());
			}	
		}
	}
}		
return result;
            ]]></body>
        </method>
        <method>
            <name>longToString</name>
            <parameter type="java.lang.Long"/>
            <body language="arl"><![CDATA[
            if (value == null) {
  return "";
}

return value.toString();
            ]]></body>
        </method>
    </class>
</b2x:translation>